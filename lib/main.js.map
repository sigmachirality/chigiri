{"mappings":"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","sources":["src/index.tsx","src/controlled.tsx","src/common.ts","src/modal.tsx"],"sourcesContent":["export * from './controlled';\nexport { default as registerModals } from './modal';\n","import React, { createContext, useContext, useState } from 'react';\nimport { throwError, ProviderProps } from './common';\n\ninterface PromiseContextState {\n  isOpen: boolean;\n  resolve: <R = unknown>(result?: R) => void | never;\n  reject: (error?: Error | string) => void | never;\n  triggerPromise: <R = unknown>() => Promise<R> | never;\n}\nconst PromiseContext = createContext<PromiseContextState>({\n  isOpen: false,\n  triggerPromise: throwError,\n  resolve: throwError,\n  reject: throwError,\n});\n\nexport const PromiseProvider = ({ children }: ProviderProps) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [resolve, setResolve] = useState<(result?: unknown) => void>(throwError);\n  const [reject, setReject] = useState<(error?: unknown) => void>(throwError);\n  const triggerPromise = <R=unknown>() => {\n    setIsOpen(true);\n    return new Promise<R>((resolve, reject) => {\n      const wrappedResolve = (result: R) => {\n        setIsOpen(false);\n        return resolve(result);\n      };\n      const wrappedReject = (error?: Error | string) => {\n        setIsOpen(false);\n        return reject(error);\n      };\n      setResolve(() => wrappedResolve);\n      setReject(() => wrappedReject);\n    });\n  };\n  const contextValue: PromiseContextState = {\n    isOpen,\n    resolve,\n    reject,\n    triggerPromise,\n  };\n  return <PromiseContext.Provider value={contextValue}>{children}</PromiseContext.Provider>;\n};\n\nexport const usePromiseWrapper = (): PromiseContextState => {\n  const ctx = useContext(PromiseContext);\n  if (!ctx) throwError();\n  return ctx;\n};\n","import type { ReactNode } from 'react';\n\nconst ERROR_WRAP_COMPONENT = 'Make sure to wrap your component in PromiseProvider!';\nexport const throwError = (): never => {\n  throw new Error(ERROR_WRAP_COMPONENT);\n};\n\nexport interface ProviderProps {\n  children?: ReactNode;\n}\n","import React, { createContext, useContext, useState, Fragment, Provider } from 'react';\nimport type { Component, ComponentProps, Context, FC } from 'react';\nimport { throwError, ProviderProps } from './common';\n\ninterface ModalProps {\n  isOpen: boolean;\n  resolve: <R = unknown>(result?: R) => void;\n  reject: (error?: Error | string) => void;\n}\nexport type ComponentTypes = {\n  [Component: string]: FC<ModalProps>;\n};\nexport type ComponentTypesUnion = keyof ComponentTypes;\nexport type ComponentPropTypes<T extends ComponentTypes> = {\n  [Component in keyof T]?: ComponentProps<typeof Component>;\n};\nexport type ComponentPropsUnion<T extends ComponentTypes> = keyof ComponentPropTypes<T>;\n\ninterface ModalContextState<T extends ComponentTypes> {\n  setProps: (props?: ComponentPropTypes<T>) => void | never;\n  triggerPromise: <R = unknown>(component: ComponentTypesUnion, props?: ComponentPropsUnion<T>) => Promise<R> | never;\n}\ntype ModalContext<T extends ComponentTypes> = Context<ModalContextState<T>>;\n\nconst _createModalContext = <T extends ComponentTypes>(): ModalContext<T> =>\n  createContext<ModalContextState<T>>({\n    setProps: throwError,\n    triggerPromise: throwError,\n  });\n\nconst _createModalProvider =\n  <T extends ComponentTypes>(ModalContext: ModalContext<T>, components: T) =>\n  ({ children }: ProviderProps) => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n    const [resolve, setResolve] = useState<(result?: unknown) => void>(throwError);\n    const [reject, setReject] = useState<(error?: unknown) => void>(throwError);\n    const [component, setComponent] = useState<ComponentTypesUnion>();\n    const [props, setProps] = useState<ComponentPropTypes<T>>();\n    const triggerPromise = <R=unknown>(component: ComponentTypesUnion, props?: ComponentPropTypes<T>) => {\n      setIsOpen(true);\n      setProps(props);\n      setComponent(component);\n      return new Promise<R>((resolve, reject) => {\n        const wrappedResolve = (result: R) => {\n          setIsOpen(false);\n          setProps(undefined);\n          setComponent(undefined);\n          return resolve(result);\n        };\n        const wrappedReject = (error?: Error | string) => {\n          setIsOpen(false);\n          setProps(undefined);\n          setComponent(undefined);\n          return reject(error);\n        };\n        setResolve(() => wrappedResolve);\n        setReject(() => wrappedReject);\n      });\n    };\n\n    const contextValue: ModalContextState<T> = {\n      triggerPromise,\n      setProps,\n    };\n\n    let RenderedModal = <Fragment />;\n    if (component && components.hasOwnProperty(component)) {\n      const ModalComponent = components[component];\n      RenderedModal = <ModalComponent isOpen={isOpen} resolve={resolve} reject={reject} {...props} />;\n    }\n\n    return (\n      <ModalContext.Provider value={contextValue}>\n        {RenderedModal}\n        {children}\n      </ModalContext.Provider>\n    );\n  };\n\ninterface ModalProviderExports<T extends ComponentTypes> {\n  useModal: () => ModalContextState<T>;\n  ModalProvider: FC<ProviderProps>;\n}\n\nfunction registerModals<T extends ComponentTypes>(components: T): ModalProviderExports<T> {\n  const Context = _createModalContext<T>();\n  const useModal = () => {\n    const ctx = useContext(Context);\n    if (!ctx) throw throwError();\n    return ctx;\n  };\n  const ModalProvider = _createModalProvider(Context, components);\n  return {\n    useModal,\n    ModalProvider,\n  };\n}\n\nexport default registerModals;\n"],"names":[],"version":3,"file":"main.js.map"}